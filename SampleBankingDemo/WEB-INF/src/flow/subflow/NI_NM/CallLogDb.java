package flow.subflow.NI_NM;

import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.json.JSONObject;

import com.avaya.sce.runtimecommon.SCESession;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2023-DEC-28  11:58:29 AM
 */
public class CallLogDb extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-DEC-28  11:58:29 AM
	 */
	public CallLogDb() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  04:57:47 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("NI_NM-ThankU", "Next");
		next.setDebugId(65);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  04:57:47 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		
		
		String sessionId = mySession.getSessionId();
		String startTime = mySession.getVariableField(IProjectVariables.START_TIME).getStringValue();
		String ani = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		String ucid = mySession.getVariableField(IProjectVariables.UC_ID).getStringValue();
		String sm = mySession.getVariableField(IProjectVariables.START_MIN).getStringValue();
		int startMin = Integer.parseInt(sm);
		
		LocalDateTime et = LocalDateTime.now();
		System.out.println("==============st+++++++++++++ : "+et);
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
		String endTime = et.format(formatter);
		
		int endMin = et.getMinute();
		System.out.println(">>>>>>>>>>>endMin>>>>>>>>>>> "+endMin);
		
		String callDuration = String.valueOf((endMin-startMin));
		
		String ivrApp = "SampleBanking";
		
		String languagePrefrence = mySession.getVariableField(IProjectVariables.LANGUAGE_PREFERENCE).getStringValue();
		String exitLocation = mySession.getVariableField(IProjectVariables.EXIT_LOCATION).getStringValue();
		
		JSONObject json = new JSONObject();
		
		json.put("ucid", ucid);
		json.put("ani", ani);
		json.put("sessionId", sessionId);
		json.put("startTime", startTime);
		json.put("endTime", endTime);				
		json.put("callDuration", callDuration);
		json.put("exitLocation", exitLocation);
		json.put("ivrApp", ivrApp);
		json.put("prefferedLanguage", languagePrefrence);
		
		
		try {
			
			URL url = new URL("http://localhost:7080/api/log");
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type", "application/json");
			conn.setDoInput(true);
			OutputStream os = conn.getOutputStream();
			os.write(json.toString().getBytes());
			os.flush();
			int responseCode = conn.getResponseCode();
			System.out.println("+++++++++++responseCode+++++++ : "+responseCode);
			
			
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  04:57:47 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
