package flow;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import com.avaya.sce.runtimecommon.SCESession;

/**
 * This is the root document for the application.  It defines the links and grammars
 * that are "global" for the application.<br>
 * Last generated by Orchestration Designer at: 2023-DEC-27  02:38:02 PM
 */
public class AppRoot extends com.avaya.sce.runtime.Root {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-DEC-27  02:38:02 PM
	 */
	public AppRoot() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the links for the node, override:
	 *     void updateLinks(Collection links, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-FEB-08  04:57:47 PM
	 * @return a collection of links
	 */
	public java.util.Collection getLinks(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Link link;
		java.util.List list;
		java.util.Collection grammarInfo = null;
		java.util.Collection<com.avaya.sce.runtime.CaptureExpression> captureExpr = null;
		// This item does not have any defined links
		list = new java.util.ArrayList();
		String ___tempGrammarName = null;

		return(list);
	}
	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the properties for the node, override:
	 *     void updateProperties(Collection properties, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-FEB-08  04:57:47 PM
	 * @return a collection of properties
	 */
	public java.util.Collection getProperties(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Property property;
		java.util.List list;
		// This item does not have any defined properties
		list = new java.util.ArrayList();

		return(list);
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
	
			
			LocalDateTime st = LocalDateTime.now();
			System.out.println("==============st+++++++++++++ : "+st);
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
			String startTime = st.format(formatter);
			
			int startMin = st.getSecond();
			System.out.println(">>>>>>>>>>>startMin>>>>>>>>>>> "+startMin);
			mySession.getVariableField(IProjectVariables.START_TIME).setValue(startTime);
			mySession.getVariableField(IProjectVariables.START_MIN).setValue(startMin);
			
			String Ani = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			System.out.println(">>>>>>>>>>>Ani>>>>>>>>>>> "+Ani);
		
	}
	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the event handlers for the node, override:
	 *    void updateEvents(Collection events, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-FEB-08  04:57:47 PM
	 * @return a collection of Events
	 */
	public java.util.Collection getEvents(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list;
		com.avaya.sce.runtime.Event event;
		list = new java.util.ArrayList();
		java.util.List eventPromptNames = null;
		String ___tempPromptName = null;
		return(list);
	}
}
