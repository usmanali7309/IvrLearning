package flow;

import java.io.File;
import java.io.FileReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Properties;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2024-FEB-08  03:04:24 PM
 */
public class PropertyLoad extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-FEB-08  03:04:24 PM
	 */
	public PropertyLoad() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  03:04:24 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		String filePath=getServletContext().getInitParameter("Property");
		  File file = new File(filePath);
		  TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "load**** " + file,mySession);
		  System.out.println(filePath);
		  try
		  {
		    Path path = file.toPath();
			BasicFileAttributes attributes = Files.readAttributes(path, BasicFileAttributes.class);
			
			FileReader reader = new FileReader(filePath);
	        Properties properties = new Properties();
      	properties.load(reader);
      	TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "properties**** " + properties,mySession);
      	
      	PropertyConfig.MaxTries= properties.getProperty("MaxTries");
	        PropertyConfig.NiCount=properties.getProperty("NICount");
	        PropertyConfig.NmCount=properties.getProperty("NMCount");
	        PropertyConfig.Account=properties.getProperty("Account");
	        PropertyConfig.Pin=properties.getProperty("Pin");
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "PropertyConfig.MaxTries**** " + PropertyConfig.MaxTries,mySession);
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "PropertyConfig.NiCount**** " + PropertyConfig.NiCount,mySession);
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "PropertyConfig.NmCount**** " + PropertyConfig.NmCount,mySession);
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "PropertyConfig.Account**** " + PropertyConfig.Account,mySession);
	        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "PropertyConfig.Pin**** " + PropertyConfig.Pin,mySession);
	        
	         mySession.getVariableField(IProjectVariables.MAX_TRIES).setValue(PropertyConfig.MaxTries);
		     mySession.getVariableField(IProjectVariables.NICOUNT).setValue(PropertyConfig.NiCount);
		     mySession.getVariableField(IProjectVariables.NMCOUNT).setValue(PropertyConfig.NmCount);
		     mySession.getVariableField(IProjectVariables.ACCOUNT).setValue(PropertyConfig.Account);
		     mySession.getVariableField(IProjectVariables.PIN).setValue(PropertyConfig.Pin);
      	}
		  catch(Exception e)
		  {
			  TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Error loading in properties**** " + e,mySession);
		  }

	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  04:57:47 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("Greeting", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
