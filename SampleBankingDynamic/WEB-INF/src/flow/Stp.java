package flow;

import java.util.HashMap;

import dynamic.Config;
import dynamic.XmlFiles;
import dynamic.XmlToJava;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2024-JAN-04  06:34:14 PM
 */
public class Stp extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JAN-04  06:34:14 PM
	 */
	public Stp() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2024-JAN-04  06:34:14 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		try {
			
		
		String xmlPath = mySession.getServlet().getServletContext().getInitParameter("XmlPath");
		String file = mySession.getServlet().getServletContext().getInitParameter("SampleBankDynamic");
		
		String xmlFile = xmlPath+file;
		System.out.println("> >>>>xmlFile>>>"+xmlFile);
		HashMap<String, String> vm = new HashMap<>();
		
		vm.put(Config.XmlFilePath, xmlFile);
		XmlFiles utils = new XmlFiles();
		utils.setXmlFilePath(vm);
		
		HashMap<String, String> xmlFilePath = utils.getXmlFilePath();
		System.out.println(">>>>Config.XmlFilePath>> "+xmlFilePath.get(Config.XmlFilePath));
		
//		XmlFiles utils = new XmlFiles();
//		utils.setXmlFilePath("C:\\Users\\Dell\\Documents\\AvayaCont\\SampleBankDynamic.xml");
//		String xmlFilePath = utils.getXmlFilePath();
//		System.out.println("> >>>>xmlFilePath1>>>"+xmlFilePath);
		
		XmlToJava xml = new XmlToJava();
		xml.parser(xmlFile);
		
		String key = "WE";
		String nextNode;
		
		if(xml.objMapDynamicXml.containsKey(key)) {
			
			HashMap<String, String> value = xml.objMapDynamicXml.get(key);
			
			String prompt = value.get(Config.PROMPTS);
			String grammar = value.get(Config.GRAMMARS);
			     nextNode = value.get(Config.NEXT_NODE);
			String menuId = value.get(Config.MENU_ID);
			String menuDes = value.get(Config.MENU_DES);
			String noInput = value.get(Config.NOINPUT);
			String noMatch = value.get(Config.NOMATCH);
			String retry = value.get(Config.RETRY);
			String maxTries = value.get(Config.MAXTRIES);
			
			mySession.getVariableField(IProjectVariables.USER_STORE,IProjectVariables.USER_STORE_FIELD_PROMPT).setValue(prompt);
			mySession.getVariableField(IProjectVariables.USER_STORE,IProjectVariables.USER_STORE_FIELD_GRAMMAR).setValue(grammar);
			mySession.getVariableField(IProjectVariables.USER_STORE,IProjectVariables.USER_STORE_FIELD_NEXT_NODE).setValue(nextNode);
			
			// Print the values or use them as needed
		    System.out.println("Prompts:@@@@@@@@@@@@@@@@@@@@@@ " + prompt);
		    System.out.println("Grammars: " + grammar);
		    System.out.println("Next Node: " + nextNode);
		    System.out.println("Menu ID: " + menuId);
		    System.out.println("Menu Description: " + menuDes);
		    System.out.println("No Input: " + noInput);
		    System.out.println("No Match: " + noMatch);
		    System.out.println("Max Tries: " + maxTries);
		    System.out.println("Retry: " + retry);
		}
		else {
			System.out.println("Key not found ===== "+key);
		}
		
		System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^"+xml.objMapDynamicXml.get(key));

		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  02:26:48 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("Greeting", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
