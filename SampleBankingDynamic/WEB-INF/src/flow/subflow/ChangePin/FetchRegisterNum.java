package flow.subflow.ChangePin;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import com.google.gson.Gson;

import flow.IProjectVariables;
import flow.subflow.CheckAccountBalance.Users;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2024-JAN-02  11:06:32 AM
 */
public class FetchRegisterNum extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JAN-02  11:06:32 AM
	 */
	public FetchRegisterNum() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2024-JAN-02  11:06:32 AM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		String cardNumber = mySession.getVariableField(IProjectVariables.ENT_CARD_NUM,IProjectVariables.ENT_CARD_NUM_FIELD_VALUE).getStringValue();
		String cvv = mySession.getVariableField(IProjectVariables.ENT_CVV,IProjectVariables.ENT_CVV_FIELD_VALUE).getStringValue();
	
		String atmUrl = mySession.getVariableField(IProjectVariables.API_URL,IProjectVariables.API_URL_FIELD_ATM_PIN_URL).getStringValue();
		
		URL url;
        try {
        	
	     url = new URL(atmUrl+"/"+cardNumber+"/"+cvv);
		System.out.println(">>>>>>>url>>>>> : "+url);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setDoOutput(true);
		conn.setRequestMethod("GET");
	
		int responseCode = conn.getResponseCode();
		System.out.println("+++++++++++responseCode+++++++ : "+responseCode);
		
		mySession.getVariableField(IProjectVariables.RESPONSE_CODE).setValue(responseCode);
		
		
		if(responseCode==HttpURLConnection.HTTP_OK) {
			  
			BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String inputLine;
            StringBuilder response = new StringBuilder();
			
			while((inputLine=br.readLine())!=null) {
				response.append(inputLine);
			}
			
			String responseBody = response.toString();
			
			Gson gson = new Gson();
			AtmCard atmCard = gson.fromJson(responseBody, AtmCard.class);
			
			String phoneNumber = atmCard.getUsers().getPhoneNumber();
			
			mySession.getVariableField(IProjectVariables.REGISTERED_MOBILE_NUMBER).setValue(phoneNumber);
			
			int cardId = atmCard.getCardId();
			String cardNumber1 = atmCard.getCardNumber();
			String pin = atmCard.getPin();
			String cvv1 = atmCard.getCvv();
			String expiryDate = atmCard.getExpiryDate();
			Users users = atmCard.getUsers();
			
			mySession.getVariableField(IProjectVariables.ATM,IProjectVariables.ATM_FIELD_CARD_ID).setValue(cardId);
			mySession.getVariableField(IProjectVariables.ATM,IProjectVariables.ATM_FIELD_CARD_NUMBER).setValue(cardNumber1);
			mySession.getVariableField(IProjectVariables.ATM,IProjectVariables.ATM_FIELD_PIN).setValue(pin);
			mySession.getVariableField(IProjectVariables.ATM,IProjectVariables.ATM_FIELD_EXPIRY_DATE).setValue(expiryDate);
			mySession.getVariableField(IProjectVariables.ATM,IProjectVariables.ATM_FIELD_CVV).setValue(cvv1);
			mySession.getVariableField(IProjectVariables.ATM,IProjectVariables.ATM_FIELD_USER).setValue(users);
			
			
		}
		
        }catch(Exception e) {
        	e.printStackTrace();
        }
	

	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  11:01:18 AM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("ChangePin-ApiFl", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
