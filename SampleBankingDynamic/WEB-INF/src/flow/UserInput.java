package flow;

import java.util.HashMap;

import com.avaya.sce.runtimecommon.SCESession;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2024-JAN-05  01:02:15 PM
 */
public class UserInput extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JAN-05  01:02:15 PM
	 */
	public UserInput() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  02:26:48 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  02:26:48 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		
		String menuValue = mySession.getVariableField(IProjectVariables.MAIN_MANU_PR,IProjectVariables.MAIN_MANU_PR_FIELD_VALUE).getStringValue();
		
		System.out.println(">>>>>menuValue>>>> "+menuValue);
		
		String[] grammar;
		String[] nextNode;
		HashMap<String,String> keyandnode;
		
		grammar = mySession.getVariableField(IProjectVariables.USER_STORE,IProjectVariables.USER_STORE_FIELD_GRAMMAR).getStringValue().split(",");
		nextNode = mySession.getVariableField(IProjectVariables.USER_STORE,IProjectVariables.USER_STORE_FIELD_NEXT_NODE).getStringValue().split(",");
		
		try {
			keyandnode = new HashMap<>();
			
			for(int i=0;i<grammar.length;i++) {
				
				keyandnode.put(grammar[i].trim(), nextNode[i].trim());
			}
			
			System.out.println(">>>>>keyandnode>>>> "+keyandnode.containsKey(menuValue));
			
			if(keyandnode.containsKey(menuValue)) {
				
				String[] kn = (keyandnode.get(menuValue)).split(":");
//				System.out.println(">>>>>kn>>>> "+nextNode[1]);
				
				if(kn.length>1) {
					 
					 System.out.println( this.getName() +" >> "+ " >> Next Key :: " + kn[0] + " >> Next Node " + kn[1]);
					 mySession.getVariableField(IProjectVariables.USER_STORE, IProjectVariables.USER_STORE_FIELD_NEXT_NODE).setValue(kn[1]);
					 mySession.getVariableField(IProjectVariables.USER_STORE, IProjectVariables.USER_STORE_FIELD_NEXT_KEYWORD).setValue(kn[0]);
					 
					 
				 }
				 else{
						mySession.getVariableField(IProjectVariables.USER_STORE, IProjectVariables.USER_STORE_FIELD_NEXT_NODE).setValue(kn[1]);
		
					}
				
			}else {
				System.out.println(">>>Key Not found>>> ");
			}
			
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		
		
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-FEB-08  02:26:48 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// switch start (75)
		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "UserStore:nextNode", com.avaya.sce.runtime.Expression.STRING_EQUAL, "CAB", false).setDebugId(75)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("CheckBalance", "AccountBalance").setDebugId(70));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "UserStore:nextNode", com.avaya.sce.runtime.Expression.STRING_EQUAL, "CAP", false).setDebugId(76)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ChangePin", "ChangePin").setDebugId(80));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "UserStore:nextNode", com.avaya.sce.runtime.Expression.STRING_EQUAL, "CL", false).setDebugId(77)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("changeLang", "ChangeLang").setDebugId(81));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "UserStore:nextNode", com.avaya.sce.runtime.Expression.STRING_EQUAL, "AT", false).setDebugId(78)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("AT", "AT").setDebugId(82));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "UserStore:nextNode", com.avaya.sce.runtime.Expression.STRING_EQUAL, "MM", false).setDebugId(79)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("MainMenu", "MainMenu").setDebugId(83));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
